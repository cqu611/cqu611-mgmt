# -*- coding:utf-8 -*-
# Configuration
# @Ekira, 2017/7/10

from os import path
from copy import deepcopy
import ConfigParser, os

from ewmsg import prerr, prwarn, prmsg


GLOBAL_CONFIG_TEXT = """
# define target dir to save .bmp which embeded watermark
# and set single mode or cycle mode
[global]
# path to save wallpaper.bmp
tgtdir = /path/to/save/
# mode: mode-single or mode-cycle or mode-bingindex
mode = mode-single
# delete .bmp generated by whitodo that embeded watermark
delbmp = no
# text for TODO
content = ./whitodo.txt
[mode-single]
# without loopping, only set desktop wallpaper using this image
srcpath = /path/to/load/image.jpg
[mode-cycle]
# loopping images in this dir
srcdir = /path/to/load/
# use random mode, otherwise using sequential mode
random = no
# switching time (minutes)
switchtime = 10
# get and set image from bing index
[mode-bingindex]
# dir to save image downloaded
downloaddir = /path/to/save/downloaded/
# download from bing everyday on this time
downloadtime = 12:00:00
[imgs-style]
# wallpaper style
style = 2
# wallpaper tile
tile = 0
# position to draw watermark
startpos = 1200, 400
endmargin = 300, 300
# define text fonts, fontsizes and fontcolors
[imgs-font]
# super level task
sfont = msyhbd.ttc
sfontsize = 50
sfontcolor = RGB(255, 0, 0)
# A level task
afont = msyhbd.ttc
afontsize = 30
afontcolor = RGB(255, 0, 0)
# B level task
bfont = msyhbd.ttc
bfontsize = 30
bfontcolor = RGB(255, 255, 0)
# C level task
cfont = msyhbd.ttc
cfontsize = 30
cfontcolor = RGB(255, 255, 255)
# D level task
dfont = msyh.ttc
dfontsize = 30
dfontcolor = RGB(255, 255, 255)"""


GLOBAL_TODO_TEXT = """
[S]The most important and the most urgent task
[A]Important and urgent task
[B]Important task
[C]General task
[D]Low priority task[DEFAULT]"""


GLOBAL_DEFAULT_CONFIG = {
        "tgtdir":"./whitodo-target/",
        "mode":"mode-single",
        "delbmp":"no",
        "content":"",
        "srcpath":"",
        "srcdir":"",
        "random":"no",
        "switchtime":"10",
        "downloaddir":"./whitodo-download/",
        "downloadtime":"12:00:00",
        "style":"2",
        "tile":"0",
        "startpos":"0,0",
        "endmargin":"0,0",
        "sfont":"msyhbd.ttc", "sfontsize":"50", "sfontcolor":"(255,0,0)",
        "afont":"msyhbd.ttc", "afontsize":"30", "afontcolor":"(255,0,0)",
        "bfont":"msyh.ttc", "bfontsize":"30", "bfontcolor":"(255,255,0)",
        "cfont":"msyh.ttc", "cfontsize":"30", "cfontcolor":"(255,255,255)",
        "dfont":"SIMYOU.TTF", "dfontsize":"25", "dfontcolor":"(255,255,255)",
        "wppath":"",
        "cachedir":"./cache/",
        "support_modes":["mode-single", "mode-cycle", "mode-bingindex"]}


# generate a configuration file
def gen_config(CONFIG_PATH):
    with open(CONFIG_PATH, "wt") as f:
        f.write(GLOBAL_CONFIG_TEXT)
    if not path.exists("whitodo.txt"):
        with open("whitodo.txt", "wt") as f:
            f.write(GLOBAL_TODO_TEXT)
    prmsg("Configuration generated on <whitodo.cfg>")
    prmsg("Update <whitodo.txt> for using [whitodo]!")


# load configuration from CONFIG_PATH
# return dict "imgcfg"
def load_config(CONFIG_PATH):
    cfg = ConfigParser.ConfigParser()
    cfg.read(CONFIG_PATH)
    imgcfg = deepcopy(GLOBAL_DEFAULT_CONFIG)
    sects = cfg.sections()

    if "global" not in sects:
        prerr("global not defined")
    opts = cfg.options("global")
    for i in opts:
        imgcfg[i] = cfg.get("global", i)
    if "content" not in opts:
        prerr("content path not defined")
    imgcfg["content"] = []
    with open(cfg.get("global", "content"), "rt") as f:
        for i in f: imgcfg["content"].append(i.strip('\n').strip('\r'))

    if imgcfg["mode"] not in imgcfg["support_modes"]:
        prerr("the mode not supported")
    if imgcfg["mode"] not in sects:
        prerr("mode not defined")
    opts = cfg.options(imgcfg["mode"])
    for i in opts:
        imgcfg[i] = cfg.get(imgcfg["mode"], i)
    if "imgs-style" not in sects:
        prwarn("style not defined")
    else:
        opts = cfg.options("imgs-style")
        for i in opts:
            imgcfg[i] = cfg.get("imgs-style", i)
    if "imgs-font" not in sects:
        prwarn("font not defined")
    else:
        opts = cfg.options("imgs-font")
        for i in opts:
            imgcfg[i] = cfg.get("imgs-font", i)
    if not path.isdir(imgcfg["tgtdir"]):
        os.makedirs(imgcfg["tgtdir"])
    if not path.isdir(imgcfg["cachedir"]):
        os.makedirs(imgcfg["cachedir"]) 
    return imgcfg






